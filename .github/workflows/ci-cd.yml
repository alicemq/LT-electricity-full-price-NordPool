name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_electricity_prices
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd electricity-prices-build && npm ci
        cd ../backend && npm ci
        cd ../data-sync && npm ci

    - name: Run linting
      run: |
        cd electricity-prices-build && npm run lint
        cd ../backend && npm run lint || echo "No lint script in backend"
        cd ../data-sync && npm run lint || echo "No lint script in data-sync"

    - name: Build frontend
      run: |
        cd electricity-prices-build
        npm run build

    - name: Run tests
      run: |
        cd backend && npm test || echo "No tests in backend"
        cd ../data-sync && npm test || echo "No tests in data-sync"

    - name: Test database connection
      run: |
        cd backend
        npm run test:db || echo "No database tests"

  # Build Docker images
  build-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push main application image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.captain
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push one-click app image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./caprover-oneclick-app/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-oneclick:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to CapRover (main branch only)
  deploy:
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to CapRover
      uses: caprover/deploy-action@v1
      with:
        server: ${{ secrets.CAPROVER_SERVER }}
        password: ${{ secrets.CAPROVER_PASSWORD }}
        appName: ${{ secrets.CAPROVER_APP_NAME }}
        imageName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Wait for deployment
      run: |
        sleep 30
        echo "Deployment completed"

    - name: Health check
      run: |
        # Wait for health check to pass
        for i in {1..10}; do
          if curl -f "${{ secrets.CAPROVER_SERVER }}/api/v1/health" > /dev/null 2>&1; then
            echo "Health check passed"
            break
          fi
          echo "Health check attempt $i failed, retrying..."
          sleep 30
        done

  # Create release (on release publish)
  create-release:
    needs: build-images
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        git log --oneline $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update release notes
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });
          
          const changelog = '${{ steps.changelog.outputs.CHANGELOG }}';
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release.id,
            body: changelog
          });

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify deployment status
  notify:
    needs: [deploy, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack (optional)
      if: failure() && secrets.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          Deployment ${{ job.status }} for ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 