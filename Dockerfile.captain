# Multi-stage build for CapRover deployment
FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    postgresql-client \
    curl \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY electricity-prices-build/package*.json ./electricity-prices-build/
COPY backend/package*.json ./backend/
COPY data-sync/package*.json ./data-sync/

# Install dependencies
RUN npm ci --only=production && \
    cd electricity-prices-build && npm ci --only=production && \
    cd ../backend && npm ci --only=production && \
    cd ../data-sync && npm ci --only=production

# Copy source code
COPY . .

# Build frontend
RUN cd electricity-prices-build && npm run build

# Create production image
FROM nginx:alpine

# Install Node.js for backend services
RUN apk add --no-cache nodejs npm postgresql-client curl

# Copy nginx configuration
COPY electricity-prices-build/nginx.conf /etc/nginx/nginx.conf

# Copy built frontend
COPY --from=base /app/electricity-prices-build/dist /usr/share/nginx/html

# Copy backend and data-sync
COPY --from=base /app/backend /app/backend
COPY --from=base /app/data-sync /app/data-sync
COPY --from=base /app/database /app/database

# Copy Swagger UI
COPY swagger-ui /app/swagger-ui

# Copy scripts
COPY scripts /app/scripts

# Set working directory
WORKDIR /app

# Create startup script
RUN echo '#!/bin/sh\n\
# Start PostgreSQL (if not using external database)\n\
# pg_ctl -D /var/lib/postgresql/data -l logfile start\n\
\n\
# Wait for database\n\
echo "Waiting for database..."\n\
until pg_isready -h postgres -p 5432 -U electricity_user; do\n\
  echo "Database is unavailable - sleeping"\n\
  sleep 2\n\
done\n\
echo "Database is ready!"\n\
\n\
# Initialize database if needed\n\
if [ ! -f /app/database/initialized ]; then\n\
  echo "Initializing database..."\n\
  psql $DATABASE_URL -f /app/database/init/01_schema.sql\n\
  touch /app/database/initialized\n\
  echo "Database initialized!"\n\
fi\n\
\n\
# Start backend API\n\
echo "Starting backend API..."\n\
cd /app/backend && npm start &\n\
\n\
# Start data sync worker\n\
echo "Starting data sync worker..."\n\
cd /app/data-sync && node src/worker.js &\n\
\n\
# Start Swagger UI\n\
echo "Starting Swagger UI..."\n\
cd /app/swagger-ui && npx http-server -p 8080 -c-1 . &\n\
\n\
# Start nginx\n\
echo "Starting nginx..."\n\
nginx -g "daemon off;"\n\
' > /app/start.sh && chmod +x /app/start.sh

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/api/v1/health || exit 1

# Start the application
CMD ["/app/start.sh"] 